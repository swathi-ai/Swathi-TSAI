# -*- coding: utf-8 -*-
"""model1.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LPMESKiR2Xq7xJMfEGnH5bJWJFlU5kd0
"""

from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torchsummary import summary

dropout_value = 0.05
class Net(nn.Module):
    def __init__(self, norm_type):
        super(Net, self).__init__()
        self.norm_type=norm_type
        if(self.norm_type == 'BN'):
            #Input block
            self.convblock1 = nn.Sequential(
                nn.Conv2d(in_channels=1, out_channels=8, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(), 
                nn.BatchNorm2d(8),
                nn.Dropout(dropout_value)
            ) 
            self.convblock2 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(),
                nn.BatchNorm2d(8),
                nn.Dropout(dropout_value)
            )
            self.convblock3 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(),
                nn.BatchNorm2d(16),
                nn.Dropout(dropout_value)
            )
            self.pool1 = nn.MaxPool2d(2,2) #input -(22, 22, 64)  OUtput- (11, 11, 64) RF - (14x14)
            self.convblock4 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=8, kernel_size=(1,1), padding=0, bias=False), 
                nn.ReLU(),
                nn.BatchNorm2d(8),
                nn.Dropout(dropout_value)
            )

            self.convblock5 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False),
                nn.ReLU(),
                nn.BatchNorm2d(8),
                nn.Dropout(dropout_value)
            )
            self.convblock6 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False),
                nn.ReLU(),
                nn.BatchNorm2d(16),
                nn.Dropout(dropout_value)
            )

            self.convblock7 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False),
                nn.ReLU(),
                nn.BatchNorm2d(10),
                nn.Dropout(dropout_value)
            )
            
            self.convblock8 = nn.Sequential(
                nn.Conv2d(in_channels=10, out_channels=10, kernel_size=(7,7), padding=0, bias=False),
                #nn.ReLU() #never
            )
        elif(self.norm_type == 'GN'):
            #Input block
            self.convblock1 = nn.Sequential(
                nn.Conv2d(in_channels=1, out_channels=8, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(), 
                nn.GroupNorm(4, 8),
                nn.Dropout(dropout_value)
            ) 
            self.convblock2 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(),
                nn.GroupNorm(4, 8),
                nn.Dropout(dropout_value)
            )
            self.convblock3 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False), 
                nn.ReLU(),
                nn.GroupNorm(4, 16),
                nn.Dropout(dropout_value)
            )
            self.pool1 = nn.MaxPool2d(2,2) #input -(22, 22, 64)  OUtput- (11, 11, 64) RF - (14x14)
            self.convblock4 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=8, kernel_size=(1,1), padding=0, bias=False), 
                nn.ReLU(),
                nn.GroupNorm(4, 8),
                nn.Dropout(dropout_value)
            )

            self.convblock5 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False),
                nn.ReLU(),
                nn.GroupNorm(4, 8),
                nn.Dropout(dropout_value)
            )
            self.convblock6 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False),
                nn.ReLU(),
                nn.GroupNorm(4, 16),
                nn.Dropout(dropout_value)
            )

            self.convblock7 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False),
                nn.ReLU(),
                nn.GroupNorm(5, 10),
                nn.Dropout(dropout_value)
            )
            
            self.convblock8 = nn.Sequential(
                nn.Conv2d(in_channels=10, out_channels=10, kernel_size=(7,7), padding=0, bias=False),
                #nn.ReLU() #never
            )
        else:
            #Input block
            self.convblock1 = nn.Sequential(
                nn.Conv2d(in_channels=1, out_channels=8, kernel_size=(3,3), padding=0, bias=False), #input -(28, 28, 1)  OUtput- (26, 26, 8) RF - (3x3)
                nn.ReLU(), 
                nn.LayerNorm(torch.tensor([8, 26, 26])),
                nn.Dropout(dropout_value)
            ) 
            self.convblock2 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False), #input -(26, 26, 8)  OUtput- (24, 24, 8) RF - (5x5)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([8, 24, 24])),
                nn.Dropout(dropout_value)
            )
            self.convblock3 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False), #input -(24, 24, 8)  OUtput- (22, 22, 16) RF - (7x7)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([16, 22, 22])),
                nn.Dropout(dropout_value)
            )
            self.pool1 = nn.MaxPool2d(2,2) #input -(22, 22, 16)  OUtput- (11, 11, 16) RF - (14x14)
            self.convblock4 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=8, kernel_size=(1,1), padding=0, bias=False), #input -(11, 11, 16)  OUtput- (11, 11, 8) RF - (14x14)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([8, 11, 11])),
                nn.Dropout(dropout_value)
            )

            self.convblock5 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=(3,3), padding=0, bias=False),#input -(11, 11, 8)  OUtput- (9, 9, 8) RF - (14x14)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([8, 9, 9])),
                nn.Dropout(dropout_value)
            )
            self.convblock6 = nn.Sequential(
                nn.Conv2d(in_channels=8, out_channels=16, kernel_size=(3,3), padding=0, bias=False),#input -(9, 9, 8)  OUtput- (7, 7, 16) RF - (14x14)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([16, 7, 7])),
                nn.Dropout(dropout_value)
            )

            self.convblock7 = nn.Sequential(
                nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False),#input -(7, 7, 16)  OUtput- (7, 7, 10) RF - (14x14)
                nn.ReLU(),
                nn.LayerNorm(torch.tensor([10, 7, 7])),
                nn.Dropout(dropout_value)
            )
            
            self.convblock8 = nn.Sequential(
                nn.Conv2d(in_channels=10, out_channels=10, kernel_size=(7,7), padding=0, bias=False),
                #nn.ReLU() #never
            )
        
    def forward(self, x):
        x = self.convblock1(x)
        x = self.convblock2(x)
        x = self.convblock3(x)
        x = self.pool1(x)
        x = self.convblock4(x)
        x = self.convblock5(x)
        x = self.convblock6(x)
        x = self.convblock7(x)
        x = self.convblock8(x)
        x = x.view(-1, 10)
        return F.log_softmax(x, dim=-1)


